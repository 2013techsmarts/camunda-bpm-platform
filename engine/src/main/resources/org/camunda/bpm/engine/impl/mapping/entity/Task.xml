<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">

  <!-- TASK INSERT -->

  <insert id="insertTask" parameterType="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    insert into ${prefix}ACT_RU_TASK (
    ID_,
    NAME_,
    PARENT_TASK_ID_,
    DESCRIPTION_,
    PRIORITY_,
    CREATE_TIME_,
    OWNER_,
    ASSIGNEE_,
    DELEGATION_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    PROC_DEF_ID_,
    CASE_EXECUTION_ID_,
    CASE_INST_ID_,
    CASE_DEF_ID_,
    TASK_DEF_KEY_,
    DUE_DATE_,
    FOLLOW_UP_DATE_,
    SUSPENSION_STATE_,
    TENANT_ID_,
    REV_
    ) values (
    #{id, jdbcType=VARCHAR},
    #{name, jdbcType=VARCHAR},
    #{parentTaskId, jdbcType=VARCHAR},
    #{description, jdbcType=VARCHAR},
    #{priority, jdbcType=INTEGER},
    #{createTime, jdbcType=TIMESTAMP},
    #{owner, jdbcType=VARCHAR},
    #{assignee, jdbcType=VARCHAR},
    #{delegationStateString, jdbcType=VARCHAR},
    #{executionId, jdbcType=VARCHAR},
    #{processInstanceId, jdbcType=VARCHAR},
    #{processDefinitionId, jdbcType=VARCHAR},
    #{caseExecutionId, jdbcType=VARCHAR},
    #{caseInstanceId, jdbcType=VARCHAR},
    #{caseDefinitionId, jdbcType=VARCHAR},
    #{taskDefinitionKey, jdbcType=VARCHAR},
    #{dueDate, jdbcType=TIMESTAMP},
    #{followUpDate, jdbcType=TIMESTAMP},
    #{suspensionState, jdbcType=INTEGER},
    #{tenantId, jdbcType=VARCHAR},
    1
    )
  </insert>

  <!-- TASK UPDATE -->

  <update id="updateTask" parameterType="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    update ${prefix}ACT_RU_TASK
    <set>
      REV_ = #{revisionNext, jdbcType=INTEGER},
      NAME_ = #{name, jdbcType=VARCHAR},
      PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
      PRIORITY_ = #{priority, jdbcType=INTEGER},
      CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},
      OWNER_ = #{owner, jdbcType=VARCHAR},
      ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
      DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},
      EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      CASE_EXECUTION_ID_ = #{caseExecutionId, jdbcType=VARCHAR},
      CASE_INST_ID_ = #{caseInstanceId, jdbcType=VARCHAR},
      CASE_DEF_ID_ = #{caseDefinitionId, jdbcType=VARCHAR},
      TASK_DEF_KEY_ = #{taskDefinitionKey, jdbcType=VARCHAR},
      DESCRIPTION_ = #{description, jdbcType=VARCHAR},
      DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
      FOLLOW_UP_DATE_ = #{followUpDate, jdbcType=TIMESTAMP},
      SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},
      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
    and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <update id="updateTaskSuspensionStateByParameters" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject">
    update ${prefix}ACT_RU_TASK set
    REV_ = REV_ + 1,
    SUSPENSION_STATE_ = #{parameter.suspensionState, jdbcType=INTEGER}
    <where>
      <if test="parameter.processInstanceId != null">
        PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.processDefinitionId != null">
        PROC_DEF_ID_ = #{parameter.processDefinitionId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.processDefinitionKey != null">
        PROC_DEF_ID_ IN (
        SELECT ID_
        FROM ${prefix}ACT_RE_PROCDEF PD
        WHERE PD.KEY_ = #{parameter.processDefinitionKey, jdbcType=VARCHAR}
        <if test="parameter.isProcessDefinitionTenantIdSet">
          <if test="parameter.processDefinitionTenantId != null">
            and PD.TENANT_ID_ = #{parameter.processDefinitionTenantId, jdbcType=VARCHAR}
          </if>
          <if test="parameter.processDefinitionTenantId == null">
            and PD.TENANT_ID_ is null
          </if>
        </if>
        )
        <bind name="columnPrefix" value="''"/>
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheckWithPrefix" />
      </if>
      <if test="parameter.caseExecutionId != null">
        CASE_EXECUTION_ID_ = #{parameter.caseExecutionId, jdbcType=VARCHAR}
      </if>
    </where>
  </update>

  <!-- TASK DELETE -->
  <delete id="deleteTask" parameterType="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    delete from ${prefix}ACT_RU_TASK where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <!-- TASK RESULTMAP -->

  <resultMap id="taskResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="nameWithoutCascade" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskIdWithoutCascade" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priorityWithoutCascade" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="ownerWithoutCascade" column="OWNER_" jdbcType="VARCHAR"/>
    <result property="assigneeWithoutCascade" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="caseExecutionId" column="CASE_EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="caseInstanceIdWithoutCascade" column="CASE_INST_ID_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKeyWithoutCascade" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDateWithoutCascade" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="followUpDateWithoutCascade" column="FOLLOW_UP_DATE_" jdbcType="TIMESTAMP"/>
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <!-- note: if you add mappings here, make sure to select the columns in 'columnSelection' -->
  </resultMap>

  <!-- TASK SELECT -->

  <select id="selectTask" parameterType="string" resultMap="taskResultMap">
    select * from ${prefix}ACT_RU_TASK where ID_ = #{id}
  </select>

  <select id="selectTasksByParentTaskId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select * from ${prefix}ACT_RU_TASK where PARENT_TASK_ID_ = #{parameter}
  </select>

  <select id="selectTasksByExecutionId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.EXECUTION_ID_ = #{parameter}
  </select>

  <select id="selectTaskByCaseExecutionId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.CASE_EXECUTION_ID_ = #{parameter}
  </select>

  <select id="selectTasksByProcessInstanceId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.PROC_INST_ID_ = #{parameter}
  </select>

  <select id="selectTaskByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct}
    <include refid="columnSelection"/>
    ${limitBetween}
    <if test="taskNameCaseInsensitive">
      , lower(RES.NAME_) LOWER_NAME_
    </if>
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.orderBySelection"/>
    <include refid="selectTaskByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectTaskCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.TaskQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectTaskByQueryCriteriaSql"/>
  </select>

  <sql id="columnSelection">
    RES.REV_, RES.ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.PRIORITY_,
    RES.CREATE_TIME_, RES.OWNER_, RES.ASSIGNEE_, RES.DELEGATION_, RES.EXECUTION_ID_,
    RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.CASE_EXECUTION_ID_, RES.CASE_INST_ID_,
    RES.CASE_DEF_ID_, RES.TASK_DEF_KEY_, RES.DUE_DATE_, RES.FOLLOW_UP_DATE_,
    RES.SUSPENSION_STATE_, RES.TENANT_ID_
  </sql>

  <sql id="selectTaskByQueryCriteriaSql">
    <bind name="escapeChar" value="'\\'"/>
    from ${prefix}ACT_RU_TASK RES

    <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
      left join ${prefix}ACT_RE_PROCDEF PROCDEF
      on RES.PROC_DEF_ID_ = PROCDEF.ID_
      <if test="!authCheck.revokeAuthorizationCheckEnabled">
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheckJoinWithoutOnClause" />
        AUTH ON (AUTH.RESOURCE_ID_ in (RES.ID_, PROCDEF.KEY_, '*'))
      </if>
    </if>

    <foreach collection="orderingProperties" item="orderingProperty" index="i">
      <if test="orderingProperty.relation != null">
        <bind name="tableAlias" value="@org.camunda.bpm.engine.impl.db.sql.MybatisJoinHelper@tableAlias(orderingProperty.relation, i)"/>
        left join
        ${prefix}${@org.camunda.bpm.engine.impl.db.sql.MybatisJoinHelper@tableMapping(orderingProperty.relation)}
        ${tableAlias}
        on
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.filterOrderByRelations"/>
      </if>
    </foreach>

    <foreach collection="logicalExpressionQueryList" item="logicalExpressionQuery" index="i">
      <if test="logicalExpressionQuery.candidateUsers != null || logicalExpressionQuery.candidateGroups != null || logicalExpressionQuery.involvedUser != null
      || logicalExpressionQuery.withCandidateGroups || logicalExpressionQuery.withCandidateUsers
      || logicalExpressionQuery.withoutCandidateGroups || logicalExpressionQuery.withoutCandidateUsers">
        <choose>
          <when test="(logicalExpressionQuery.withCandidateUsers || logicalExpressionQuery.withoutCandidateUsers)
            &amp;&amp; (logicalExpressionQuery.assigned || logicalExpressionQuery.unassigned)">left</when>
          <otherwise>left</otherwise>
        </choose>
        join ${prefix}ACT_RU_IDENTITYLINK I_${i} on I_${i}.TASK_ID_ = RES.ID_
      </if>
      <if test="logicalExpressionQuery.processDefinitionKey != null || logicalExpressionQuery.processDefinitionName != null
      || logicalExpressionQuery.processDefinitionNameLike != null
      || (logicalExpressionQuery.processDefinitionKeys != null &amp;&amp; logicalExpressionQuery.processDefinitionKeys.length > 0)">
        inner join ${prefix}ACT_RE_PROCDEF D_${i} on RES.PROC_DEF_ID_ = D_${i}.ID_
      </if>
      <if test="logicalExpressionQuery.processInstanceBusinessKey != null || logicalExpressionQuery.processInstanceBusinessKeyLike != null ||
              (logicalExpressionQuery.processInstanceBusinessKeys != null &amp;&amp; logicalExpressionQuery.processInstanceBusinessKeys.length > 0)">
        inner join ${prefix}ACT_RU_EXECUTION E_${i} on RES.PROC_INST_ID_ = E_${i}.ID_
      </if>
      <if test="logicalExpressionQuery.activityInstanceIdIn != null &amp;&amp; logicalExpressionQuery.activityInstanceIdIn.length > 0">
        left join ${prefix}ACT_RU_EXECUTION E1_${i} on RES.EXECUTION_ID_ = E1_${i}.ID_
      </if>

      <if test="logicalExpressionQuery.caseDefinitionKey != null || logicalExpressionQuery.caseDefinitionName != null || logicalExpressionQuery.caseDefinitionNameLike != null">
        inner join ${prefix}ACT_RE_CASE_DEF CD_${i} on RES.CASE_DEF_ID_ = CD_${i}.ID_
      </if>
      <if test="logicalExpressionQuery.caseInstanceBusinessKey != null || logicalExpressionQuery.caseInstanceBusinessKeyLike != null">
        inner join ${prefix}ACT_RU_CASE_EXECUTION CE_${i} on RES.CASE_INST_ID_ = CE_${i}.ID_
      </if>

      <!-- todo: add conditions -->
      left join ${prefix}ACT_RU_VARIABLE A_L_${i} on RES.ID_ = A_L_${i}.TASK_ID_
      left join ${prefix}ACT_RU_VARIABLE A_${i} on RES.PROC_INST_ID_ = A_${i}.PROC_INST_ID_
      left join ${prefix}ACT_RU_VARIABLE A_C_${i} on RES.CASE_INST_ID_ = A_C_${i}.CASE_INST_ID_
    </foreach>
    <where>
      <bind name="closingParentheses" value="@org.camunda.bpm.engine.impl.db.sql.MyBatisTaskQueryHelper@closingParenthesesList(logicalExpressionQueryList)"/>
      <trim suffixOverrides="and|or">
      <foreach collection="logicalExpressionQueryList" item="logicalExpressionQuery" index="i">
        <if test="i > 0 &amp;&amp; closingParentheses.get(i-1) != null">
          ${logicalExpressionQuery.parentLogicalExpression}
        </if>
        <if test="logicalExpressionQueryList.size() > 1">(</if>
        <trim prefixOverrides="and|or">
          <if test="logicalExpressionQuery.taskIds != null &amp;&amp; !logicalExpressionQuery.taskIds.isEmpty()">
            RES.ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.taskIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.names != null &amp;&amp; !logicalExpressionQuery.names.isEmpty()">
            <!-- based on CAM-6363 compare name case insensitive -->
            ${logicalExpressionQuery.logicalExpression} UPPER(RES.NAME_) in
            <foreach item="item" index="index" collection="logicalExpressionQuery.names"
                     open="(" separator="," close=")">
              UPPER(#{item})
            </foreach>
          </if>
          <if test="logicalExpressionQuery.namesNotEqual != null &amp;&amp; !logicalExpressionQuery.namesNotEqual.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} UPPER(RES.NAME_) not in
            <foreach item="item" index="index" collection="logicalExpressionQuery.namesNotEqual"
                     open="(" separator="," close=")">
              UPPER(#{item})
            </foreach>
          </if>
          <if test="logicalExpressionQuery.namesLike != null &amp;&amp; !logicalExpressionQuery.namesLike.isEmpty()">
            <!-- based on CAM-6165 compare name like case insensitive -->
            <foreach item="item" index="index" collection="logicalExpressionQuery.namesLike">
              ${logicalExpressionQuery.logicalExpression} UPPER(RES.NAME_) like UPPER(#{item}) ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.namesNotLike != null &amp;&amp; !logicalExpressionQuery.namesNotLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.namesNotLike">
              ${logicalExpressionQuery.logicalExpression} UPPER(RES.NAME_) not like UPPER(#{item}) ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.descriptions != null &amp;&amp; !logicalExpressionQuery.descriptions.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.DESCRIPTION_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.descriptions"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.descriptionsLike != null &amp;&amp; !logicalExpressionQuery.descriptionsLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.descriptionsLike">
              ${logicalExpressionQuery.logicalExpression} RES.DESCRIPTION_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.priorities != null &amp;&amp; !logicalExpressionQuery.priorities.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.PRIORITY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.priorities"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.minPriority != null">
            ${logicalExpressionQuery.logicalExpression} RES.PRIORITY_ &gt;= #{logicalExpressionQuery.minPriority}
          </if>
          <if test="logicalExpressionQuery.maxPriority != null">
            ${logicalExpressionQuery.logicalExpression} RES.PRIORITY_ &lt;= #{logicalExpressionQuery.maxPriority}
          </if>
          <if test="logicalExpressionQuery.assignees != null &amp;&amp; !logicalExpressionQuery.assignees.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.ASSIGNEE_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.assignees"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.assigneesLike != null &amp;&amp; !logicalExpressionQuery.assigneesLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.assigneesLike">
              ${logicalExpressionQuery.logicalExpression} RES.ASSIGNEE_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.owners != null &amp;&amp; !logicalExpressionQuery.owners.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.OWNER_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.owners"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.unassigned">
            ${logicalExpressionQuery.logicalExpression} RES.ASSIGNEE_ IS NULL
          </if>
          <if test="logicalExpressionQuery.assigned">
            ${logicalExpressionQuery.logicalExpression} RES.ASSIGNEE_ IS NOT NULL
          </if>
          <if test="logicalExpressionQuery.noDelegationState">
            ${logicalExpressionQuery.logicalExpression} RES.DELEGATION_ IS NULL
          </if>
          <if test="logicalExpressionQuery.delegationStates != null &amp;&amp; !logicalExpressionQuery.delegationStates.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.DELEGATION_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.delegationStates"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processInstanceIds != null &amp;&amp; !logicalExpressionQuery.processInstanceIds.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.PROC_INST_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processInstanceIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processInstanceBusinessKeysOr != null &amp;&amp; !logicalExpressionQuery.processInstanceBusinessKeysOr.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} E_${i}.BUSINESS_KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processInstanceBusinessKeysOr"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processInstanceBusinessKeys != null &amp;&amp; logicalExpressionQuery.processInstanceBusinessKeys.length > 0">
            ${logicalExpressionQuery.logicalExpression} E_${i}.BUSINESS_KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processInstanceBusinessKeys"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processInstanceBusinessKeysLike != null &amp;&amp; !logicalExpressionQuery.processInstanceBusinessKeysLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.processInstanceBusinessKeysLike">
              ${logicalExpressionQuery.logicalExpression} E_${i}.BUSINESS_KEY_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.executionIds != null &amp;&amp; !logicalExpressionQuery.executionIds.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.EXECUTION_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.executionIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseInstanceIds != null &amp;&amp; !logicalExpressionQuery.caseInstanceIds.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.CASE_INST_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseInstanceIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseInstanceBusinessKeys != null &amp;&amp; !logicalExpressionQuery.caseInstanceBusinessKeys.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} CE_${i}.BUSINESS_KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseInstanceBusinessKeys"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseInstanceBusinessKeysLike != null &amp;&amp; !logicalExpressionQuery.caseInstanceBusinessKeysLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseInstanceBusinessKeysLike">
              ${logicalExpressionQuery.logicalExpression} CE_${i}.BUSINESS_KEY_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseExecutionIds != null &amp;&amp; !logicalExpressionQuery.caseExecutionIds.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.CASE_EXECUTION_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseExecutionIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.createTimes != null &amp;&amp; !logicalExpressionQuery.createTimes.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.CREATE_TIME_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.createTimes"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.createTimeBefore != null">
            ${logicalExpressionQuery.logicalExpression} RES.CREATE_TIME_ &lt; #{logicalExpressionQuery.createTimeBefore}
          </if>
          <if test="logicalExpressionQuery.createTimeAfter != null">
            ${logicalExpressionQuery.logicalExpression} RES.CREATE_TIME_ &gt; #{logicalExpressionQuery.createTimeAfter}
          </if>
          <if test="logicalExpressionQuery.keysOr != null &amp;&amp; !logicalExpressionQuery.keysOr.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.TASK_DEF_KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.keysOr"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.keysLike != null &amp;&amp; !logicalExpressionQuery.keysLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.keysLike">
                ${logicalExpressionQuery.logicalExpression} RES.TASK_DEF_KEY_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.parentTaskIds != null &amp;&amp; !logicalExpressionQuery.parentTaskIds.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.PARENT_TASK_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.parentTaskIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.keys != null &amp;&amp; logicalExpressionQuery.keys.length > 0">
            ${logicalExpressionQuery.logicalExpression} RES.TASK_DEF_KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.keys"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processDefinitionIds != null &amp;&amp; !logicalExpressionQuery.processDefinitionId.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.PROC_DEF_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processDefinitionIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processDefinitionKeysOr != null &amp;&amp; !logicalExpressionQuery.processDefinitionKeysOr.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} D_${i}.KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processDefinitionKeysOr"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processDefinitionKeys != null &amp;&amp; logicalExpressionQuery.processDefinitionKeys.length > 0">
            ${logicalExpressionQuery.logicalExpression} D_${i}.KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processDefinitionKeys"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processDefinitionNames != null &amp;&amp; !logicalExpressionQuery.processDefinitionNames.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} D_${i}.NAME_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.processDefinitionNames"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.processDefinitionNamesLike != null &amp;&amp; !logicalExpressionQuery.processDefinitionNamesLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.processDefinitionNamesLike">
              ${logicalExpressionQuery.logicalExpression} D_${i}.NAME_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseDefinitionIds != null &amp;&amp; !logicalExpressionQuery.caseDefinitionIds.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.CASE_DEF_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseDefinitionIds"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseDefinitionKeys != null &amp;&amp; !logicalExpressionQuery.caseDefinitionKeys.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} CD_${i}.KEY_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseDefinitionKeys"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseDefinitionNames != null &amp;&amp; !logicalExpressionQuery.caseDefinitionNames.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} CD_${i}.NAME_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseDefinitionNames"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.caseDefinitionNamesLike != null &amp;&amp; !logicalExpressionQuery.caseDefinitionNamesLike.isEmpty()">
            <foreach item="item" index="index" collection="logicalExpressionQuery.caseDefinitionNamesLike">
              ${logicalExpressionQuery.logicalExpression} CD_${i}.NAME_ like #{item} ESCAPE #{escapeChar}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.dueDates != null &amp;&amp; !logicalExpressionQuery.dueDates.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.DUE_DATE_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.dueDates"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.dueBefore != null">
            ${logicalExpressionQuery.logicalExpression} RES.DUE_DATE_ &lt; #{logicalExpressionQuery.dueBefore}
          </if>
          <if test="logicalExpressionQuery.dueAfter != null">
            ${logicalExpressionQuery.logicalExpression} RES.DUE_DATE_ &gt; #{logicalExpressionQuery.dueAfter}
          </if>
          <if test="logicalExpressionQuery.dueDate != null || logicalExpressionQuery.dueBefore != null || logicalExpressionQuery.dueAfter != null">
            ${logicalExpressionQuery.logicalExpression} RES.DUE_DATE_ is not null
          </if>
          <if test="logicalExpressionQuery.followUpDates != null &amp;&amp; !logicalExpressionQuery.followUpDates.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.FOLLOW_UP_DATE_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.followUpDates"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="logicalExpressionQuery.followUpBefore != null &amp;&amp; !logicalExpressionQuery.followUpNullAccepted">
            ${logicalExpressionQuery.logicalExpression} RES.FOLLOW_UP_DATE_ &lt; #{logicalExpressionQuery.followUpBefore}
          </if>
          <if test="logicalExpressionQuery.followUpBefore != null &amp;&amp; logicalExpressionQuery.followUpNullAccepted">
            ${logicalExpressionQuery.logicalExpression} (RES.FOLLOW_UP_DATE_ IS NULL OR RES.FOLLOW_UP_DATE_ &lt; #{logicalExpressionQuery.followUpBefore})
          </if>
          <if test="logicalExpressionQuery.followUpAfter != null">
            ${logicalExpressionQuery.logicalExpression} RES.FOLLOW_UP_DATE_ &gt; #{logicalExpressionQuery.followUpAfter}
          </if>
          <if test="(logicalExpressionQuery.followUpDate != null || logicalExpressionQuery.followUpBefore != null || logicalExpressionQuery.followUpAfter != null) &amp;&amp; !logicalExpressionQuery.followUpNullAccepted">
            ${logicalExpressionQuery.logicalExpression} RES.FOLLOW_UP_DATE_ is not null
          </if>
          <if test="logicalExpressionQuery.excludeSubtasks">
            ${logicalExpressionQuery.logicalExpression} RES.PARENT_TASK_ID_ IS NULL
          </if>
          <if test="logicalExpressionQuery.activityInstanceIdIn != null &amp;&amp; logicalExpressionQuery.activityInstanceIdIn.length > 0">
            ${logicalExpressionQuery.logicalExpression} E1_${i}.ACT_INST_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.activityInstanceIdIn"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>

          <if test="logicalExpressionQuery.isTenantIdSet()">
            <if test="logicalExpressionQuery.tenantIds != null &amp;&amp; logicalExpressionQuery.tenantIds.length > 0">
              ${logicalExpressionQuery.logicalExpression} RES.TENANT_ID_ in
              <foreach item="tenantId" index="index" collection="logicalExpressionQuery.tenantIds"
                       open="(" separator="," close=")">
                #{tenantId}
              </foreach>
            </if>
            <if test="logicalExpressionQuery.withoutTenantIds == null">
              ${logicalExpressionQuery.logicalExpression} RES.TENANT_ID_ is null
            </if>
          </if>

          <if test="logicalExpressionQuery.candidateUsers != null &amp;&amp; !logicalExpressionQuery.candidateUsers.isEmpty() || logicalExpressionQuery.candidateGroups != null &amp;&amp; !logicalExpressionQuery.candidateGroups.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} <trim prefix="(" suffix=")" prefixOverrides="and ">
            <if test="!logicalExpressionQuery.includeAssignedTasks">
              and RES.ASSIGNEE_ is null
            </if>
            and I_${i}.TYPE_ = 'candidate'
            <if test="logicalExpressionQuery.candidateUsers != null || logicalExpressionQuery.candidateGroups != null">
              and
              (
              <if test="logicalExpressionQuery.candidateUsers != null &amp;&amp; !logicalExpressionQuery.candidateUsers.isEmpty()">
                I_${i}.USER_ID_ in
                <foreach item="candidateUser" index="index" collection="logicalExpressionQuery.candidateUsers"
                         open="(" separator="," close=")">
                  #{candidateUser}
                </foreach>
              </if>
              <if test="logicalExpressionQuery.candidateGroups != null &amp;&amp; !logicalExpressionQuery.candidateGroups.isEmpty()">
                <if test="logicalExpressionQuery.candidateUsers != null">
                  or
                </if>
                I_${i}.GROUP_ID_ in
                <foreach item="group" index="index" collection="logicalExpressionQuery.candidateGroups"
                         open="(" separator="," close=")">
                  #{group}
                </foreach>
              </if>
              )
            </if>
          </trim>
          </if>

          <if test="logicalExpressionQuery.withoutCandidateGroups || logicalExpressionQuery.withoutCandidateUsers">
            ${logicalExpressionQuery.logicalExpression} <trim prefix="(" suffix=")" prefixOverrides="and ">
            <if test="!logicalExpressionQuery.includeAssignedTasks">
              and RES.ASSIGNEE_ is null
            </if>
            and I_${i}.TYPE_ = 'candidate'
            <if test="logicalExpressionQuery.withoutCandidateGroups">
              and I_${i}.GROUP_ID_ is null
            </if>
            <if test="logicalExpressionQuery.withoutCandidateUsers">
              and I_${i}.USER_ID_ is null
            </if>
          </trim>
          </if>

          <if test="logicalExpressionQuery.withCandidateGroups || logicalExpressionQuery.withCandidateUsers">
            ${logicalExpressionQuery.logicalExpression} <trim prefix="(" suffix=")" prefixOverrides="and ">
            <if test="!logicalExpressionQuery.includeAssignedTasks">
              and RES.ASSIGNEE_ is null
            </if>
            and I_${i}.TYPE_ = 'candidate'
            <if test="logicalExpressionQuery.withCandidateGroups">
              and I_${i}.GROUP_ID_ is not null
            </if>
            <if test="logicalExpressionQuery.withCandidateUsers">
              and I_${i}.USER_ID_ is not null
            </if>
          </trim>
          </if>

          <if test="logicalExpressionQuery.involvedUsers != null &amp;&amp; !logicalExpressionQuery.involvedUsers.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} I_${i}.USER_ID_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.involvedUsers"
                     open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>

          <!-- queryVariables -->
          <!-- PLEASE NOTE: If you change anything have a look into the HistoricVariableInstance & HistoricProcessInstance, the same query object is used there! -->
          <foreach collection="logicalExpressionQuery.variables" index="index" item="queryVariableValue">
            ${logicalExpressionQuery.logicalExpression} <trim prefix="(" suffix=")" prefixOverrides="and ">
              <choose>
                <when test="!queryVariableValue.local">
                  <bind name="local" value="''" />
                  <!-- When process instance variable is queried for, taskId should be null -->
                  and A_${i}.TASK_ID_ is null
                  <choose>
                    <when test="!queryVariableValue.isProcessInstanceVariable()">
                      <bind name="local" value="'C_'" />
                      and RES.CASE_INST_ID_ = A_${local + i}.CASE_INST_ID_
                    </when>
                    <otherwise>
                      and RES.PROC_INST_ID_ = A_${i}.PROC_INST_ID_
                    </otherwise>
                  </choose>
                </when>
                <otherwise>
                  <bind name="local" value="'L_'" />
                </otherwise>
              </choose>

              and A_${local + i}.NAME_= #{queryVariableValue.name}
              <bind name="varTypeField" value="'TYPE_'"/>
              <bind name="varPrefix" value="'A_' + local + i + '.'"/>
              <if test="queryVariableValue.valueConditions != null">
                and
                <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.variableValueConditions"/>
              </if>
            </trim>
          </foreach>

          <if test="logicalExpressionQuery.suspensionStates != null &amp;&amp; !logicalExpressionQuery.suspensionStates.isEmpty()">
            ${logicalExpressionQuery.logicalExpression} RES.SUSPENSION_STATE_ in
            <foreach item="item" index="index" collection="logicalExpressionQuery.suspensionStates"
                     open="(" separator="," close=")">
              #{item.stateCode}
            </foreach>
          </if>

          <choose>
            <when test="closingParentheses.get(i) != null">
              ${closingParentheses.get(i)}
            </when>
            <otherwise>
              ${logicalExpressionQuery.logicalExpression}
            </otherwise>
          </choose>
        </trim>
      </foreach>
      </trim>
      <!-- todo: research if this makes actually sense -->
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.contextualAuthorizationCheck" />
      <!-- todo: research if this makes actually sense -->
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />
    </where>
  </sql>

  <select id="selectTaskByNativeQuery" parameterType="java.util.Map" resultMap="taskResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectTaskByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="taskResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBeforeNativeQuery}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectTaskCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>

  <!-- TASK GROUP ASSIGNMENT REPORT RESULT MAP -->

  <resultMap id="taskCountByCandidateGroupReportResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.TaskCountByCandidateGroupResultEntity">
    <result property="taskCount" column="TASK_COUNT_" jdbcType="INTEGER" />
    <result property="groupName" column="GROUP_NAME_" jdbcType="VARCHAR" />
  </resultMap>

  <select id="selectTaskCountByCandidateGroupReportQuery" parameterType="org.camunda.bpm.engine.impl.TaskReportImpl" resultMap="taskCountByCandidateGroupReportResultMap">
    SELECT
    COUNT(T.ID_) AS TASK_COUNT_,
    I.GROUP_ID_ AS GROUP_NAME_
    FROM
    ${prefix}ACT_RU_TASK T
    LEFT JOIN
    ${prefix}ACT_RU_IDENTITYLINK I
    ON
    I.TASK_ID_ = T.ID_

    <where>
      T.ASSIGNEE_ IS NULL
      <bind name="columnPrefix" value="'T.'"/>
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheckWithPrefix" />
    </where>

    GROUP BY
    I.GROUP_ID_
    ORDER BY
    GROUP_NAME_
    ASC
  </select>

</mapper>
